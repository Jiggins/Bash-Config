#!/bin/bash

source utils.sh

function prependFileWithCheck {
  if [ ! -e "$2" ] || ! grep -q 'configurations added by github.com/Jiggins/dotfiles' "$2"; then
    prependFile "$1" "$2"
  fi

  return 0
}

# Options

while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -v|--verbose)
      VERBOSE='-v'
      ;;

    all)
      INSTALL_BASH=1
      INSTALL_GHCI=1
      INSTALL_READLINE=1
      INSTALL_TMUX=1
      INSTALL_VIM=1
      INSTALL_ZSH=1
      ;;

    -d|--install-dir|--install-directory)
      INSTALL_DIR="$2"
      shift
      ;;

    bash)
      INSTALL_BASH=1
      ;;

    -b|--bashrc)
      BASHRC="$2"
      shift
      ;;

    --bashdir)
      BASHDIR="$2"
      shift
      ;;

    ghci)
      INSTALL_GHCI=1
      ;;

    readline)
      INSTALL_READLINE=1
      ;;

    tmux)
      INSTALL_TMUX=1
      ;;

    vim)
      INSTALL_VIM=1
      ;;

    --vimrc)
      VIMRC="$2"
      shift
      ;;

    --vimdir)
      VIM_DIR="$2"
      ;;

    zsh)
      INSTALL_ZSH=1
      ;;

    *)
      echo "Invalid argument $1"
      exit 128
      ;;
  esac
  shift # past argument or value
done

# INSTALL_DIR defaults to home
INSTALL_DIR="${INSTALL_DIR:-${HOME}}"
mkdir -p ${VERBOSE} "${INSTALL_DIR}/bin" | log

# DOTFILES - Location of this repository
DOTFILES=$(pwd)

function linkfile() {
  local source=$1
  local destination=$2

  if [[ -f "${destination}" ]]; then
    mv -v "${destination}" "${destination}.bak"
  elif [[ -L "${destination}" ]]; then
    return 0
  fi

  ln -s "${source}" "${destination}"
  return $?
}

function checkDependencies {
  dependencies=(
    git
  )

  if [[ -n "${INSTALL_TMUX}" ]]; then dependencies+=(tmux); fi
  if [[ -n "${INSTALL_VIM}" ]];  then dependencies+=(vim); dependencies+=(cc); dependencies+=(make); fi
  if [[ -n "${INSTALL_ZSH}" ]];  then dependencies+=(zsh); fi

  for i in ${dependencies[*]}; do
    if ! commandExists "$i"; then
      dependenciesNotFound="${dependenciesNotFound}$i "
    fi
  done

  if [ ${dependenciesNotFound+x} ]; then
    echo 'The following dependencies are not installed on this system' | log -s
    echo -e "\\n\\t${dependenciesNotFound}\\n" | log -s

    case $(uname) in
      'Darwin')
        echo 'These can be installed using brew' | log -s

        if command -v brew > /dev/null; then
          echo 'brew is not installed on this system, consider installing brew and running this script again' | log -s
          echo 'http://brew.sh'| log -s
        else
          echo "brew install ${dependenciesNotFound}" | log -s
        fi
        ;;

      *)
        if commandExists apt; then
          echo -e "These can be installed using\\n\\n\\tsudo apt install ${dependenciesNotFound}\\n" | log -s
        elif commandExists yum; then
          echo -e "These can be installed using\\n\\n\\tsudo yum install ${dependenciesNotFound}\\n" | log -s
        else
          echo -e "These can be installed using your package manager to install: ${dependenciesNotFound}\\n" | log -s
        fi
        ;;
    esac
    exit 1
  fi
}

checkDependencies

# Bash

if [[ -n $INSTALL_BASH ]]; then
  BASHRC="${BASHRC:-${INSTALL_DIR}/.bashrc}"
  BASHDIR="${BASHDIR:-${INSTALL_DIR}/.config/bash}"

  info "Writing bashrc to ${BASHRC}" | log -s
  prependFileWithCheck src/rcfiles/bashrc "${BASHRC}"

  # Bash completion for mac
  if [ "$(uname)" == "Darwin" ]; then
    if commandExists brew; then
      if ! brew ls --version bash-completion > /dev/null; then
        info "Installing bash completion for mac" | log -s
        brew install git bash-completion
      fi
    fi
  fi

  echo ""
fi

# Ghci

#  Vi mode in ghci!
if [[ -n $INSTALL_GHCI ]]; then
  linkfile "${DOTFILES}/src/rcfiles/ghci" "${INSTALL_DIR}/.ghci" | log

  info "Enabling Vi-mode in ghci" | log -s
  if ! grep -q "editMode vi" "${INSTALL_DIR}/.haskeline"; then
    echo "editMode: Vi" >> "${INSTALL_DIR}/.haskeline"
  fi
fi

# Readline

if [[ -n $INSTALL_READLINE ]]; then
  INPUTRC="${INSTALL_DIR}/.inputrc"

  if [[ -e ${INPUTRC} ]]; then
    info "Writing inputrc to ${INPUTRC}" | log -s
    linkfile "${DOTFILES}/src/rcfiles/inputrc" "${INPUTRC}" | log
  fi
fi

# Vim

if [[ -n $INSTALL_VIM ]]; then
  VIMRC="${VIMRC:-${INSTALL_DIR}/.vimrc}"
  VIM_DIR="${VIM_DIR:-${INSTALL_DIR}/.vim}"

  info "Writing vimrc to ${VIMRC}" | log -s
  prependFileWithCheck "${DOTFILES}/src/rcfiles/vimrc" "${VIMRC}"

  echo "Copying vim scripts to ${VIM_DIR}" | log
  mkdir "${VERBOSE}" -p "${VIM_DIR}" | log
  linkfile "${DOTFILES}/src/vim" "${VIM_DIR}" 2>&1 | log

  # Installing or updating Vim plugins
  if [ ! -d "${VIM_DIR}/bundle" ]; then
    info "Installing vim plugins"
    vi -u "${VIMRC}" +PluginInstall +qall \
      || error "Could not install vim plugins to ${VIM_DIR}/bundle" && exit 0 | log -s
  else
    info "Updating vim plugins"
    vi -u "${VIMRC}" +PluginUpdate  +qall \
      || error "Could not update vim plugins in ${VIM_DIR}/bundle" | log -s
  fi

  # Install CommandT
  info "Installing CommandT" | log -s
  if [ -d "${VIM_DIR}/bundle/command-t" ]; then
    if commandExists rake; then
      (
        cd "${VIM_DIR}/bundle/command-t" || exit 1
        bundle install
        rake make
      ) 2>&1 | log

      [[ "${PIPESTATUS[0]}" -ne 0 ]] && error "Failed to install CommandT; check ${LOGFILE} for details" | log -s
    else
      warning "rake not installed; skipping command-t"
    fi
  fi

  # Install Powerline
  info "Installing Powerline" | log -s
  if [ -d "${VIM_DIR}/bundle/powerline" ]; then
    (
      cd "${VIM_DIR}/bundle/powerline" || exit 1
      ./setup.py build   2>&1
      ./setup.py install 2>&1
    ) | log

    [[ "${PIPESTATUS[0]}" -ne 0 ]] && error "Failed to install Powerline; check ${LOGFILE} for details" | log -s
  else
    warning "powerline directory not found, vim may not be installed with python support; skipping powerline" | log -s
  fi

  # Install Vimproc
  info  "Installing Vimproc" | log -s
  if [[ -e "${VIM_DIR}/bundle/vimproc.vim" ]]; then
    ( cd "${VIM_DIR}/bundle/vimproc.vim" && make ) | log
    [[ "${PIPESTATUS[0]}" -ne 0 ]]  && error "Failed to install Vimproc; check ${LOGFILE} for details" | log -s
  fi

  # install Tern for JavaScript
  info "Installing Tern for JavaScript; check ${LOGFILE} for details" | log -s
  if commandExists npm; then
    ( cd "${VIM_DIR}/bundle/tern_for_vim" && npm install ) | log
    [[ "${PIPESTATUS[0]}" -ne 0 ]] && error "Failed to install Tern" | log
  else
    warning "npm is not installed, skipping Tern" | log -s
  fi

  if [[ ! -L "${INSTALL_DIR}/bin/thesaurus-lookup.sh" ]]; then
    ln -fsv "${VIM_DIR}/bundle/vim-online-thesaurus/plugin/thesaurus-lookup.sh" "${INSTALL_DIR}/bin/" | log
  fi
fi

# Tmux

if [[ -n $INSTALL_TMUX ]]; then
  TMUX_CONF="${INSTALL_DIR}/.tmux.conf"
  linkfile "${DOTFILES}/src/rcfiles/tmux.conf" "${TMUX_CONF}" | log

  [[ ! -z "${TMUX}" ]] && tmux source "${TMUX_CONF}"
fi

# Zsh

if [[ -n $INSTALL_ZSH ]]; then
  ZSHRC="${ZSHRC:-${INSTALL_DIR}/.zshrc}"
  ZSHDIR="${ZSHDIR:-${INSTALL_DIR}/.oh-my-zsh}"
  ZSH_CUSTOM="${ZSHDIR}/custom"

  if [[ ! -e "${ZSHRC}" ]] || ! grep 'oh-my-zsh.sh' "${ZSHRC}" > /dev/null; then
    info "Installing Oh-My-Zsh" | log -s
    sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" | log
    [[ "${PIPESTATUS[0]}" -ne 0 ]] && error "Could not install Oh-My-Zsh; check ${LOGFILE} for details" | log -s
  fi

  info "Writing zshrc to ${ZSHRC}" | log -s
  linkfile "${DOTFILES}/src/rcfiles/zshrc" "${ZSHRC}" | log

  if [[ ! -d ${ZSH_CUSTOM}/plugins/zsh-autosuggestions ]] && [[ -d ${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting ]]; then
    echo "Installing zsh plugins to ${ZSH_CUSTOM}/plugins/" | log
    git clone https://github.com/zsh-users/zsh-autosuggestions "${ZSH_CUSTOM}/plugins/zsh-autosuggestions" | log
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting" | log
  fi
fi
