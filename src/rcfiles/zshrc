# Path to oh-my-zsh installation.
export ZSH=${HOME}/.oh-my-zsh

# ZSH Options
COMPLETION_WAITING_DOTS="true"
ENABLE_CORRECTION="true"
HIST_STAMPS="yyyy-mm-dd"
HYPHEN_INSENSITIVE="true"

setopt INC_APPEND_HISTORY

# 10ms for key sequences
KEYTIMEOUT=1

export ZSH_THEME=fishy

autoload predict-on

plugins=(
  bundler   cabal
  git       nmap
  osx       rails
  rake      ruby
  stack     # theFuck
  tmux      vi-mode
  zsh-autosuggestions
  zsh-syntax-highlighting
)

# adds a directory to the end of PATH if the directory exists
function addpath() {
  if [ -d "$1" ]; then
    path+=("$1")
    return 0
  fi

  return 1
}

# Prevent duplicate entries in $PATH
typeset -U path

addpath "${HOME}/bin"
addpath "${HOME}/.local/bin"
addpath "${HOME}/.rvm/bin"
addpath "${HOME}/.vim/bundle/powerline/scripts"
addpath "/usr/local/bin"
addpath "/usr/local/sbin"
addpath "/usr/local/texlive/2016basic/bin/x86_64-darwin"

# Solidify PATH changes for the rest of the shell sessions
export PATH

source "${ZSH}/oh-my-zsh.sh"
[ -f "${HOME}/.fzf.zsh" ]      && source "${HOME}/.fzf.zsh"
[ -f "${HOME}/bin/local.zsh" ] && source "${HOME}/bin/local.zsh"

# Will not load plugins on first launch
[ -e "${ZSH_CUSTOM}/plugins/zsh-autosuggestions" ]     || git clone https://github.com/zsh-users/zsh-autosuggestions.git     "${ZSH_CUSTOM}/plugins/zsh-autosuggestions"
[ -e "${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting" ] || git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting"

export EDITOR=$(which vim)
export LESS="SR"
export PASSWORD_STORE_ENABLE_EXTENSIONS=true

# Use GNU versions of common shell tools if the exist (useful on macOS)
command -v 'gsed' >/dev/null && alias sed='gsed'
command -v 'gtar' >/dev/null && alias tar='gtar'

alias ccat='pygmentize -f 256'
alias cgrep='grep --color=always'
alias gpg="gpg2"
alias isodate='date +%Y-%m-%d'
alias n='task next'
alias next='task next'
alias pandoc-html='pandoc --standalone -t html --template ~/.pandoc/template.html --css ~/.pandoc/template.css'
alias path='echo $PATH | sed "s/:/\n/g"'
alias tree='tree -C'

if command -v pigz > /dev/null; then
  alias tarz='tar --use-compress-program=pigz'
fi

# Codi
# Usage: codi [filetype] [filename]
function codi() {
  local syntax="${1:-python}"
  shift
  vim -c \
    "let g:startify_disable_at_vimenter = 1 |\
    set bt=nofile ls=0 noru nonu nornu |\
    hi ColorColumn ctermbg=NONE |\
    hi VertSplit ctermbg=NONE |\
    hi NonText ctermfg=0 |\
    Codi $syntax" "$@"
}

function compress() {
  if [[ -z "$1" ]]; then
    echo "usage: compress [files]"
    return 1
  fi

  tar -cf - "$@" | pigz | pv
}

function js() {
  jshon "$@" | pygmentize -l 'json'
}

# use vim ex commands in a UNIX pipe
function vp() {
    vim - -u NONE -es '+1' "+$*" '+%print' '+:qa!' | tail -n +2
}

# use vim normal mode commands in a UNIX pipe
function vn() {
    vim - -u NONE -es '+1' "+normal $*" '+%print' '+:qa!' | tail -n +2
}

function map() {
  while read i; do
    eval "$* $i"
  done
}

function man() {
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    command man "$@"
}

new-md() {
    local file="$(isodate)-${*// /-}.md"
    local length="${#$(echo $*)}"
    printf "${*}\n"               >> $file
    printf "=%.0s" {1..${length}} >> $file
    printf "\n\n"                 >> $file
    ${EDITOR} $file
}

function grep-after() {
  perl -nle 'print $& if m{(?<=${1}\s)\S+}'
}

function remove-spaces() {
  for i in $1; do                                                                                                                                                                                                                            Â 
    if echo $i | grep -E ' ' > /dev/null; then
      echo "$i" "${i// /-}"
    fi
  done
}

function mmail() {
  pandoc --standalone --from markdown --to rtf --template bootstrap.rtf --output - $1 | pbcopy
}

function tn() {
  [[ "$PWD" = "$HOME" ]] && (tmux attach -t "Local" || tmux new -s "Local") && return 0
  local dirname=${PWD##*/}
  local name=${1:-${dirname}}

  tmux attach -t "$name" || tmux new -s "$name"
}

# Set USE_POWERLINE=1 in .zprofile to use powerline
if [ ! -z ${USE_POWERLINE} ]; then
  if [ -e "${HOME}/.vim/bundle/powerline/powerline/bindings/zsh/powerline.zsh" ]; then
    export POWERLINE_ZSH="${HOME}/.vim/bundle/powerline/powerline/bindings/zsh/powerline.zsh"
  fi

  if $(command -v powerline-config > /dev/null); then
    . $POWERLINE_ZSH
  fi
fi

printf "\e[?1004l"
