# Vim configurations added by github.com/Jiggins/dotfiles

# ZSH Options
COMPLETION_WAITING_DOTS="true"
ENABLE_CORRECTION="true"
HYPHEN_INSENSITIVE="true"

# ZSH style
zstyle ':completion:*' menu select

# History options
HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000
SAVEHIST=10000
HIST_STAMPS="yyyy-mm-dd"
setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.

autoload predict-on

# 10ms for key sequences
KEYTIMEOUT=1

if [[ -d "${HOME}/.oh-my-zsh" ]]; then
  # Path to oh-my-zsh installation.
  export ZSH=${HOME}/.oh-my-zsh
  export ZSH_THEME=fishy

  plugins=(
    bundler   cabal
    git       nmap
    osx       rails
    rake      ruby
    stack     tmux
    vi-mode
  )

  [[ -d "${HOME}/.zsh/zsh-completions" ]]          && plugins+=(zsh-completions)
  [[ -d "${HOME}/.zsh/zsh-autosuggestions" ]]      && plugins+=(zsh-autosuggestions)
  [[ -d "${HOME}/.zsh/zsh-syntax-highlighting" ]]  && plugins+=(zsh-syntax-highlighting)
  [[ -d "${HOME}/.zsh/zsh-completion-generator" ]] && plugins+=(zsh-completion-generator)

  source "${ZSH}/oh-my-zsh.sh"
fi

# adds a directory to the end of PATH if the directory exists
function addpath() {
  if [ -d "$1" ]; then
    path+=("$1")
    return 0
  fi

  return 1
}

# Prevent duplicate entries in $PATH
typeset -U path

addpath "${HOME}/bin"
addpath "${HOME}/.local/bin"
addpath "${HOME}/.rvm/bin"
addpath "${HOME}/.vim/bundle/powerline/scripts"
addpath "/usr/local/bin"
addpath "/usr/local/sbin"
addpath "/usr/local/opt/python/libexec/bin"
addpath "/usr/local/texlive/2016basic/bin/x86_64-darwin"

# Solidify PATH changes for the rest of the shell sessions
export PATH

[ -f "${HOME}/.fzf.zsh" ]           && source "${HOME}/.fzf.zsh"
[ -f "${HOME}/.rvm/scripts/rvm" ]   && source "${HOME}/.rvm/scripts/rvm"
[ -f "/usr/local/rvm/scripts/rvm" ] && source /usr/local/rvm/scripts/rvm
[ -f "${HOME}/bin/local.zsh" ]      && source "${HOME}/bin/local.zsh"

export EDITOR=$(which vim)
export LESS="SR"
export PASSWORD_STORE_ENABLE_EXTENSIONS=true

# Use GNU versions of common shell tools if the exist (useful on macOS)
command -v 'gsed' >/dev/null && alias sed='gsed'
command -v 'gtar' >/dev/null && alias tar='gtar'

command -v 'bat' >/dev/null && alias cat='bat'

alias ccat='pygmentize -f 256'
alias cgrep='grep --color=always'
alias focusfix='printf "\e[?1004l"'
alias gpg="gpg2"
alias isodate='date +%Y-%m-%d'
alias pandoc-html='pandoc --standalone -t html --template ~/.pandoc/template.html --css ~/.pandoc/template.css'
alias path='echo $PATH | sed "s/:/\n/g"'
alias tidy='tidy -quiet -indent'
alias tree='tree -C'

# Task Warrior
alias n='task ready'
alias nn="task project:${CURRENT_PROJECT}"

# Colours and text formatting
export BOLD=$(tput bold)
export RED=$(tput setaf 1)
export GREEN=$(tput setaf 2)
export YELLOW=$(tput setaf 3)
export BLUE=$(tput setaf 3)
export RESET=$(tput sgr0)
export CLEARLN="\r$(tput el)"

if command -v pigz > /dev/null; then
  alias tarz='tar --use-compress-program=pigz'
fi

# https://github.com/nvbn/thefuck
if command -v thefuck > /dev/null; then
  eval $(thefuck --alias)
fi

function review() {
  description="Review ${1}"
  [[ -n "${2}" ]] && description+=" for ${2}"
  shift; shift
  task add scheduled:today ${@} "${description}" \
    || return $?
  task reviews
}

# Codi
# Usage: codi [filetype] [filename]
function codi() {
  local syntax="${1:-python}"
  shift
  vim -c \
    "let g:startify_disable_at_vimenter = 1 |\
    set bt=nofile ls=0 noru nonu nornu |\
    hi ColorColumn ctermbg=NONE |\
    hi VertSplit ctermbg=NONE |\
    hi NonText ctermfg=0 |\
    Codi $syntax" "$@"
}

function compress() {
  if [[ -z "$1" ]]; then
    echo "usage: compress [files]"
    return 1
  fi

  tar -cf - "$@" | pigz | pv
}

function intercalate() {
  ghc -e "getContents >>= putStrLn . foldr1 (\a c -> a ++ \"${1}\" ++ c) . words"
}

function js() {
  jshon "$@" | pygmentize -l 'json'
}

# use vim ex commands in a UNIX pipe
function vp() {
    vim - -u NONE -es '+1' "+$*" '+%print' '+:qa!' | tail -n +2
}

# use vim normal mode commands in a UNIX pipe
function vn() {
    vim - -u NONE -es '+1' "+normal $*" '+%print' '+:qa!' | tail -n +2
}

function map() {
  while read i; do
    eval "$* $i"
  done
}

function man() {
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    command man "$@"
}

new-md() {
    local file="$(isodate)-${*// /-}.md"
    local length="${#$(echo $*)}"
    printf "${*}\n"               >> $file
    printf "=%.0s" {1..${length}} >> $file
    printf "\n\n"                 >> $file
    ${EDITOR} $file
}

function grep-after() {
  perl -nle 'print $& if m{(?<=${1}\s)\S+}'
}

# Join array with delimiter
# From https://stackoverflow.com/a/17841619
function join_by {
  local IFS="$1"
  shift
  echo "$*"
}

function remove-spaces() {
  for i in $1; do                                                                                                                                                                                                                            Â 
    if echo $i | grep -E ' ' > /dev/null; then
      echo "$i" "${i// /-}"
    fi
  done
}

function pip() {
  if (( $# < 1 )); then
    echo "usage: $0 <package> [<packages>]"
    return 1
  fi

  for i in 3 2; do
    "python${i}" -m pip "${@}" \
      || echo "${YELLO}Warning: Failed to install ${*} for python${i}${RESET}"
  done

  return $?
}

function mmail() {
  pandoc --standalone --from markdown --to rtf --template bootstrap.rtf --output - $1 | pbcopy
}

function tn() {
  [[ "$PWD" = "$HOME" ]] && (tmux attach -t "Local" || tmux new -s "Local") && return 0
  local dirname=${PWD##*/}
  local name=${1:-${dirname}}

  tmux attach -t "$name" || tmux new -s "$name"
}

# iTerm2 integration
if [[ $(uname -s) -eq 'Darwin' ]] && [[ -e "${HOME}/.iterm2_shell_integration.zsh" ]]; then
  source "${HOME}/.iterm2_shell_integration.zsh"
fi
