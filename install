#!/bin/bash

source ./utils.sh

# install_dir defaults to home
install_dir="${install_dir:-${HOME}}"
mkdir -p ${VERBOSE} "${install_dir}/bin" | log

# dotfiles - Location of this repository
dotfiles=${PWD}

BASHDIR="${BASHDIR:-${install_dir}/.config/bash}"
BASHRC="${BASHRC:-${install_dir}/.bashrc}"
INPUTRC="${install_dir}/.inputrc"
TMUX_CONF="${install_dir}/.tmux.conf"
VIMRC="${VIMRC:-${install_dir}/.vimrc}"
VIM_DIR="${VIM_DIR:-${install_dir}/.vim}"
ZSHDIR="${ZSHDIR:-${install_dir}/.oh-my-zsh}"
ZSHRC="${ZSHRC:-${install_dir}/.zshrc}"
ZSH_CUSTOM="${ZSHDIR}/custom"

function prependFileWithCheck {
  if [ ! -e "$2" ] || ! grep -q 'configurations added by github.com/Jiggins/dotfiles' "$2"; then
    prependFile "$1" "$2"
  fi

  return 0
}

function linkfile() {
  local source=$1
  local destination=$2

  if [[ -f "${destination}" ]]; then
    mv -v "${destination}" "${destination}.bak"
    info "Original ${destination} moved to ${destination}.bak" | log -s
  elif [[ -L "${destination}" ]]; then
    return 0
  fi

  ln -s "${source}" "${destination}" \
    || { ret=$?; error "Could not symlink ${source} to ${destination}"; return $ret; }
  return $?
}

function checkDependency() {
  local -a missing

  for i in "$@"; do
    commandExists "$i" || missing+=( "$i" )
  done

  if [[ ${#missing[@]} -gt 0 ]]; then
    echo 'The following dependencies are not installed on this system' | log -s
    echo -e "\\n\\t${missing[*]}\\n" | log -s
    return 1
  fi

  return 0
}

# Bash
function installBashCustomisation() {
  info "Writing bashrc to ${BASHRC}" | log -s
  prependFileWithCheck src/rcfiles/bashrc "${BASHRC}"

  # Bash completion for mac
  if [ "$(uname)" == "Darwin" ]; then
    if commandExists brew; then
      if ! brew ls --version bash-completion > /dev/null; then
        info "Installing bash completion for mac" | log -s
        brew install git bash-completion
      fi
    fi
  fi

  echo ""
}

function installGitCustomisation() {
  checkDependency git ctags \
    || return $?

  linkfile "${dotfiles}/src/git_template" "${install_dir}/.git_template" \
    || return $?

  git config --global init.templatedir "${install_dir}/.git_template" | log -s
  git config --global alias.ctags '!.git/hooks/ctags' | log -s
}

function installCtagsCustomisation() {
  checkDependency ctags \
    || return $?

  if ctags --version | grep 'Universal Ctags' > /dev/null; then
    info "using Universal Ctags" | log -s
    linkfile "${dotfiles}/src/ctags.d" "${install_dir}/.ctags.d"
    return 0
  elif ctags --version | grep 'Exuberant Ctags'; then
    info "Using Exuberent Ctags" | log -s
    linkfile "${dotfiles}/src/ctags.d/default.ctags" "${install_dir}/.ctags"
    return 0
  else
    warn "Using an unsupported version of ctags; consider installing Universal Ctags" | log -s
    return 1
  fi
}

# GHCi
function installGHCiCustomisation() {
  checkDependency ghci || return 1
  #  Vi mode in ghci!
  linkfile "${dotfiles}/src/rcfiles/ghci" "${install_dir}/.ghci" | log

  info "Enabling Vi-mode in ghci" | log -s
  if ! grep -q "editMode vi" "${install_dir}/.haskeline"; then
    echo "editMode: Vi" >> "${install_dir}/.haskeline"
  fi
}

# Readline
function installReadlineCustomisation() {
  if [[ -e ${INPUTRC} ]]; then
    info "Writing inputrc to ${INPUTRC}" | log -s
    linkfile "${dotfiles}/src/rcfiles/inputrc" "${INPUTRC}" | log
  fi
}

# Vim
function installVimCustomisation() {
  checkDependency vim
  info "Writing vimrc to ${VIMRC}" | log -s
  prependFileWithCheck "${dotfiles}/src/rcfiles/vimrc" "${VIMRC}"

  echo "Copying vim scripts to ${VIM_DIR}" | log
  linkfile "${dotfiles}/src/vim" "${VIM_DIR}" 2>&1 | log

  # Installing or updating Vim plugins
  if [ ! -d "${VIM_DIR}/bundle" ]; then
    info "Installing vim plugins"
    vim -u "${VIMRC}" +PluginInstall +qall \
      || error "Could not install vim plugins to ${VIM_DIR}/bundle" && return 1 | log -s
  else
    info "Updating vim plugins"
    vi -u "${VIMRC}" +PluginUpdate  +qall \
      || error "Could not update vim plugins in ${VIM_DIR}/bundle" | log -s
  fi

  # Install CommandT
  info "Installing CommandT" | log -s
  if [ -d "${VIM_DIR}/bundle/command-t" ]; then
    if commandExists rake; then
      (
        cd "${VIM_DIR}/bundle/command-t" || exit 1
        bundle install
        rake make
      ) 2>&1 | log

      [[ "${PIPESTATUS[0]}" -ne 0 ]] && error "Failed to install CommandT; check ${LOGFILE} for details" | log -s
    else
      warn "rake not installed; skipping command-t"
    fi
  fi

  # Install Powerline
  info "Installing Powerline" | log -s
  if [ -d "${VIM_DIR}/bundle/powerline" ]; then
    (
      cd "${VIM_DIR}/bundle/powerline" || exit 1
      python setup.py build   2>&1
      python setup.py install 2>&1
    ) | log

    [[ "${PIPESTATUS[0]}" -ne 0 ]] && error "Failed to install Powerline; check ${LOGFILE} for details" | log -s
  else
    warn "powerline directory not found, vim may not be installed with python support; skipping powerline" | log -s
  fi

  # Install Vimproc
  info  "Installing Vimproc" | log -s
  if [[ -e "${VIM_DIR}/bundle/vimproc.vim" ]]; then
    ( cd "${VIM_DIR}/bundle/vimproc.vim" && make ) | log
    [[ "${PIPESTATUS[0]}" -ne 0 ]]  && error "Failed to install Vimproc; check ${LOGFILE} for details" | log -s
  fi

  # install Tern for JavaScript
  info "Installing Tern for JavaScript; check ${LOGFILE} for details" | log -s
  if commandExists npm; then
    ( cd "${VIM_DIR}/bundle/tern_for_vim" && npm install ) | log
    [[ "${PIPESTATUS[0]}" -ne 0 ]] && error "Failed to install Tern" | log
  else
    warn "npm is not installed, skipping Tern" | log -s
  fi

  if [[ ! -L "${install_dir}/bin/thesaurus-lookup.sh" ]]; then
    ln -fsv "${VIM_DIR}/bundle/vim-online-thesaurus/plugin/thesaurus-lookup.sh" "${install_dir}/bin/" | log
  fi
}

# Tmux

function installTmuxCustomisation() {
  checkDependency tmux || return 1

  linkfile "${dotfiles}/src/rcfiles/tmux.conf" "${TMUX_CONF}" | log

  [[ ! -z "${TMUX}" ]] && tmux source "${TMUX_CONF}"
}

# Zsh
function installZSHCustomisation() {
  checkDependency zsh git

  if [[ ! -e "${ZSHRC}" ]] || ! grep 'oh-my-zsh.sh' "${ZSHRC}" > /dev/null; then
    info "Installing Oh-My-Zsh" | log -s
    sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" | log
    [[ "${PIPESTATUS[0]}" -ne 0 ]] && error "Could not install Oh-My-Zsh; check ${LOGFILE} for details" | log -s
  fi

  info "Writing zshrc to ${ZSHRC}" | log -s
  linkfile "${dotfiles}/src/rcfiles/zshrc" "${ZSHRC}" | log

  local plugin_name
  local -a plugins=(
    zsh-users/zsh-completions
    zsh-users/zsh-autosuggestions
    zsh-users/zsh-syntax-highlighting
    RobSis/zsh-completion-generator
  )

  for plugin in "${plugins[@]}"; do
    plugin_name="${plugin//*\//}"
    if [[ ! -d "${ZSH_CUSTOM}/plugins/${plugin_name}" ]]; then
      info "Installing zsh plugin: ${plugin} to ${ZSH_CUSTOM}/plugins/${plugin_name}" | log -s
      git clone "https://github.com/${plugin}" "${ZSH_CUSTOM}/plugins/${plugin_name}" | log
    fi
  done
}

# Options
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -v|--verbose)
      VERBOSE='-v'
      ;;

    all)
      installBashCustomisation
      installCtagsCustomisation
      installGHCiCustomisation
      installReadlineCustomisation
      installTmuxCustomisation
      installVimCustomisation
      installZSHCustomisation
      ;;

    -d|--install-dir|--install-directory)
      install_dir="$2"
      shift
      ;;

    bash)
      installBashCustomisation
      ;;

    -b|--bashrc)
      BASHRC="$2"
      shift
      ;;

    --bashdir)
      BASHDIR="$2"
      shift
      ;;

    ctags)
      installCtagsCustomisation
      ;;

    git)
      installGitCustomisation
      ;;

    ghci)
      installGHCiCustomisation
      ;;

    readline)
      installReadlineCustomisation
      ;;

    tmux)
      installTmuxCustomisation
      ;;

    vim)
      installVimCustomisation
      ;;

    --vimrc)
      VIMRC="$2"
      shift
      ;;

    --vimdir)
      VIM_DIR="$2"
      ;;

    zsh)
      installZSHCustomisation
      ;;

    *)
      echo "Invalid argument $1"
      exit 128
      ;;
  esac
  shift # past argument or value
done

