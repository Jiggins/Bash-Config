#! /bin/bash

# $1: File to prepend (Will appear at the top of $2)
# $2: File to prepend to (output file)
function prependFile {
  if [ ! $# -eq 2 ]; then
    echo 'prependFile expects two arguments:'
    echo '  $1: File to prepend (Will appear at the top of $2)'
    echo '  $2: File to prepend to (output file)'
    exit 1
  else
    cp $1 tmp
    cat $2 >> tmp
    mv tmp $2
  fi
}

while getopts "l:" opt; do
    case "$opt" in
    l)  LOCAL=1
        ;;
    esac
done

# Mac OSX (Darwin) uses `.bash_profile`, everything else uses `.bashrc`
if [[ ${LOCAL} -eq 1 ]]; then
  BASH_DIR='test/.bash'
  BASHRC='test/.bashrc'
  GITCONFIG='test/.gitconfig'
  VIM_DIR='test/vim'
  VIMRC='test/vimrc'
else
  BASH_DIR="${HOME}/.bash"
  GITCONFIG="${HOME}/.gitconfig"
  VIM_DIR="${HOME}/.vim"
  VIMRC="${HOME}/.vimrc"
  GHCI="${HOME}/.ghci"

  case `uname` in
    'Darwin')
      BASHRC="${HOME}/.bash_profile"
      ;;
    *)
      BASHRC="${HOME}/.bashrc"
  esac
fi

# Copy bash stuff
mkdir -p ${BASH_DIR}
cp -r src/bash/* ${BASH_DIR}

# Prepend src/bashrc to the existing .bashrc or .bash_profile
if [ -e ${BASHRC} ]; then
  # Backup bashrc incase something goes wrong
  cp ${BASHRC} ${BASHRC}.bak
fi

if [ ! -e ${BASHRC} ] || ! grep -q 'source ${HOME}/.bash/aliases' ${BASHRC}; then
  prependFile src/bashrc ${BASHRC}
fi

## Scripts

scripts=(
  https://raw.githubusercontent.com/jwiegley/git-scripts/master/git-forest 
  https://raw.githubusercontent.com/whiteinge/dotfiles/master/bin/diffconflicts
)

mkdir -p ${BASH_DIR}/scripts

for i in ${scripts[*]}; do
  # --no-clobber - Don't download if script already exists
  # --directory-prefix - Download scripts to ~/.bash/scripts
  wget --no-clobber --quiet --directory-prefix=${BASH_DIR}/scripts $i
done

chmod +x ${BASH_DIR}/scripts/*
export PATH="${PATH}:${BASH_DIR}/scripts"

# GHCi Config
if [ -e ${GHCI} ]; then
  if grep -q 'prompt' ${GHCI}; then
    prependFile src/ghci ${GHCI}
  fi
else
  cp src/ghci ${GHCI}
fi

# Vi mode in ghci!
echo "editMode: Vi" >> ~/.haskeline

# inputrc - I like Vim mode input

function copyInputrc {
  cp src/inputrc ${HOME}/.inputrc
}

if [ ! $INPUTRC ]; then
  if [ -e ${HOME}/.inputrc ] && ! diff src/inputrc ${HOME}/.inputrc > /dev/null; then
    echo 'inputrc already exists, do you want to overwite? y/n'
    read input
    case ${input} in
      y | Y | yes)
        copyInputrc

        # Tab completions for Mac
        if [ "$(uname)" == "Darwin" ]; then
          echo 'set completion-ignore-case on' >> ${HOME}/.inputrc
          echo 'show-all-if-ambiguous on' >> ${HOME}/.inputrc
          echo 'TAB: menu-complete' >> ${HOME}/.inputrc

          # Git completions for Mac
          if command -v brew > /dev/null; then
            if ! brew ls --version bash-completion > /dev/null; then
              brew install git bash-completion
            fi

            if [ -f `brew --prefix`/etc/bash_completion ]; then
              . `brew --prefix`/etc/bash_completion
            fi
          fi
        fi
        shift
        ;;
      *)
        ;;
    esac
  else
    copyInputrc
  fi
fi

if command -v git > /dev/null; then
  ./src/gitconfig
fi

# Powerline Fonts
if [ ! -e ${HOME}/.fonts/ubuntu-mono-power ]; then
  mkdir -p ${HOME}/.fonts/ubuntu-mono-power
  mkdir -p ${HOME}/.config/fontconfig/conf.d/
  wget --quiet https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf -O ${HOME}/.fonts/PowerlineSymbols.otf &
  wget --quiet https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf -O ${HOME}/.config/fontconfig/conf.d/10-powerline-symbols.conf &
  git clone https://github.com/pdf/ubuntu-mono-powerline-ttf.git ${HOME}/.fonts/ubuntu-mono-power > /dev/null
  fc-cache -vf | grep 'fc-cache:'
fi

# Tmux Stuff
if [ ! -e ${VIMRC} ] || ! grep -q 'Vim configurations added by github.com/Jiggins/Bash-Config' ${VIMRC}; then
  prependFile src/tmux.conf ${HOME}/.tmux.conf
fi

cp -r src/tmux ${HOME}/.tmux

tmux source ${HOME}/.tmux.conf

# Vim stuff
mkdir -p ${VIM_DIR}

# Prepend src/virc to the existing .vimrc
if [ -e ${VIMRC} ]; then
  # Backup vimrc incase something goes wrong
  cp ${VIMRC} ${VIMRC}.bak
fi

if [ ! -e ${VIMRC} ] || ! grep -q 'Tmux configurations added by github.com/Jiggins/Bash-Config' ${VIMRC}; then
  prependFile src/vimrc ${VIMRC}
fi

cp src/vim/* ${VIM_DIR}

vi +PluginInstall +qall

# Transparent Monokai colorscheme
cp src/Monokai-Transparent.vim ${VIM_DIR}/bundle/vim-colorschemes/colors/

# Quick fix for invalid format option error caused by haskell-vim
# Odly Mac/FreeBSD takes an extra argument to sed, Ubuntu does not
case `uname` in
  'Darwin')
    sed -i '' '2s/ formatoptions+=j//' ${VIM_DIR}/bundle/haskell-vim/after/ftplugin/haskell.vim
    ;;
  *)
    sed -i '2s/ formatoptions+=j//' ${VIM_DIR}/bundle/haskell-vim/after/ftplugin/haskell.vim
esac

source ${BASHRC}

exit 0
