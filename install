#!/bin/bash

# Checks if a command is installed and tells the user to install it if not.
function commandExists {
  if command -v $1 > /dev/null; then
    return 0
  else
    echo "${1}: command not found"
    case `uname` in
      'Darwin')
        echo -e "${1} can be installed using\n\tbrew install ${1}"

        if command -v brew > /dev/null; then
          echo 'brew is not instaled on this system, consider installing brew and running this script again'
          echo 'http://brew.sh'
        fi

        ;;
      *)
        echo -e "${1} can be installed using\n\tsudo apt-get  install ${1}"
        ;;
    esac

    return 1
  fi
}

# $1: File to prepend (Will appear at the top of $2)
# $2: File to prepend to (output file)
function prependFile {
  if [ ! $# -eq 2 ]; then
    echo 'prependFile expects two arguments:'
    echo '  $1: File to prepend (Will appear at the top of $2)'
    echo '  $2: File to prepend to (output file)'
    exit 1
  elif [ ! -e $2 ]; then
    verbose "Copying $1 to $2"
    cp $1 $2
  else
    verbose "Prepending $1 to $2"
    cp $1 tmp
    cat $2 >> tmp
    mv tmp $2
  fi

  return 0
}

function prependFileWithCheck {
  if [ ! -e $2 ] || ! grep -q 'configurations added by github.com/Jiggins/Bash-Config' $2; then
    prependFile $1 $2
  fi

  return 0
}

function verbose () {
  if [ ${VERBOSE+x} ]; then
    echo -e "$1"
  fi

  return 0
}

# Variables
BASHRC="${HOME}/.bashrc"
BASH_DIR="${HOME}/.config/bash"
GHCI="${HOME}/.ghci"
TMUX="${HOME}/.tmux.conf"
VIM_DIR="${HOME}/.vim"
VIMRC="${HOME}/.vimrc"
# VERBOSE='-v'

# Install config directory
mkdir ${VERBOSE} -p ${HOME}/.config
mkdir ${VERBOSE} -p ${HOME}/.vim
cp ${VERBOSE} -r src/config/ ${HOME}/.config

cp ${VERBOSE} -r src/vim/* ${HOME}/.vim

# Install rcfiles
for f in src/rcfiles/*; do
  file=$(basename $f)
  prependFileWithCheck ${f} ${HOME}/.${file}
done

# Download Scripts
scripts=(
  https://raw.githubusercontent.com/jwiegley/git-scripts/master/git-forest
  https://raw.githubusercontent.com/whiteinge/dotfiles/master/bin/diffconflicts
)

if commandExists wget; then
  mkdir -p ${BASH_DIR}/scripts
  for i in ${scripts[*]}; do
    # --no-clobber - Don't download if script already exists
    # --directory-prefix - Download scripts to ~/.bash/scripts
    if [ ${VERBOSE+x} ]; then
      wget --no-clobber --directory-prefix=${BASH_DIR}/scripts $i
    else
      wget --no-clobber --quiet --directory-prefix=${BASH_DIR}/scripts $i
    fi
  done

  chmod +x ${BASH_DIR}/scripts/*

  # Powerline Fonts
  if [ ! -e ${HOME}/.fonts/ubuntu-mono-power ] && [ ! -e ${HOME}/.config/fontconfig/conf.d ]; then
    mkdir -p ${HOME}/.fonts/ubuntu-mono-power
    mkdir -p ${HOME}/.config/fontconfig/conf.d/
    wget --quiet https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf -O ${HOME}/.fonts/PowerlineSymbols.otf
    wget --quiet https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf -O ${HOME}/.config/fontconfig/conf.d/10-powerline-symbols.conf
    git clone https://github.com/pdf/ubuntu-mono-powerline-ttf.git ${HOME}/.fonts/ubuntu-mono-power > /dev/null
    fc-cache -vf ~/.fonts | grep 'fc-cache:'
  fi
fi

# Powerline installation
if commandExists pip; then
  export PATH="${PATH}:${HOME}/.config/bash/scripts"

  if [ ${VERBOSE+x} ]; then
    pip install powerline-status
  else
    pip install -q powerline-status
  fi
fi

# Bash completion for mac
if [ "$(uname)" == "Darwin" ]; then
  if commandExists brew; then
    if ! brew ls --version bash-completion > /dev/null; then
      brew install git bash-completion
    fi
  fi
fi

# Git configuration
if command -v git > /dev/null; then
  ./src/gitconfig
fi

# Vi mode in ghci!
if ! grep -q "editMode vi" ${HOME}/.haskeline; then
  echo "editMode: Vi" >> ${HOME}/.haskeline
fi

# Installing Vim plugins
vi +PluginInstall +qall

# Transparent Monokai colorscheme
cp src/Monokai-Transparent.vim ${VIM_DIR}/bundle/vim-colorschemes/colors/

# Quick fix for invalid format option error caused by haskell-vim
# Odly Mac/FreeBSD takes an extra argument to sed, Ubuntu does not
verbose "Applying patch to ${VIM_DIR}/bundle/haskell-vim/after/ftplugin/haskell.vim"
case `uname` in
  'Darwin')
    sed -i '' '2s/ formatoptions+=j//' ${VIM_DIR}/bundle/haskell-vim/after/ftplugin/haskell.vim
    ;;
  *)
    sed -i '2s/ formatoptions+=j//' ${VIM_DIR}/bundle/haskell-vim/after/ftplugin/haskell.vim
esac

source ${BASHRC}

exit 0
