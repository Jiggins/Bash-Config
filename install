#!/bin/bash

if [[ $1 == "-v" ]]; then
  VERBOSE='-v';
fi

LOGFILE=log/install.log

# Logging
mkdir $VERBOSE -p log
date > ${LOGFILE}

function log {
  while read line; do
    if [ ${VERBOSE+x} ]; then
      echo -e "$line" | tee -a $LOGFILE
    else
      echo -e "$line" >> $LOGFILE
    fi
  done
}

# Checks if a command is installed
function commandExists {
  if command -v $1 > /dev/null; then
    return 0
  else
    return 1
  fi
}

function checkDependencies {
  dependencies=(
    git
    vim
    wget
  )

  for i in ${dependencies[*]}; do
    if ! commandExists $i; then
      dependenciesNotFound="${dependenciesNotFound}$i "
    fi
  done

  if [ ${dependenciesNotFound+x} ]; then
    echo 'The following dependencies are not installed on this system' | log
    echo -e "\n\t${dependenciesNotFound}\n" | log

    case `uname` in
      'Darwin')
        echo 'These can be installed using brew'

        if command -v brew > /dev/null; then
          echo 'brew is not installed on this system, consider installing brew and running this script again'
          echo 'http://brew.sh'
        else
          echo "brew install ${dependenciesNotFound}"
        fi
        ;;

      *)
        if commandExists apt-get; then
          echo -e "These can be installed using\n\n\tsudo apt-get install ${dependenciesNotFound}\n"
        elif commandExists yum; then
          echo -e "These can be installed using\n\n\tsudo yum install ${dependenciesNotFound}\n"
        else
          echo -e "These can be installed using your package manager to install: ${dependenciesNotFound}\n"
        fi
        ;;
    esac
    exit 1
  fi
}

# $1: File to prepend (Will appear at the top of $2)
# $2: File to prepend to (output file)
function prependFile {
  if [ ! $# -eq 2 ]; then
    echo 'prependFile expects two arguments:'
    echo '  $1: File to prepend (Will appear at the top of $2)'
    echo '  $2: File to prepend to (output file)'
    exit 1
  elif [ ! -e $2 ]; then
    echo -e "Copying $1 to $2" | log
    cp $1 $2
  else
    echo -e "Prepending $1 to $2" | log
    cp $1 tmp
    cat $2 >> tmp
    mv tmp $2
  fi

  return 0
}

function prependFileWithCheck {
  if [ ! -e $2 ] || ! grep -q 'configurations added by github.com/Jiggins/Bash-Config' $2; then
    prependFile $1 $2
  fi

  return 0
}

# Variables
BASHRC="${HOME}/.bashrc"
BASH_DIR="${HOME}/.config/bash"
GHCI="${HOME}/.ghci"
POWERLINE_DIR="${HOME}/.vim/bundle/powerline"
TMUX="${HOME}/.tmux.conf"
VIMRC="${HOME}/.vimrc"
VIM_DIR="${HOME}/.vim"

echo "Checking dependencies:" | log
checkDependencies

printf "Creating new directories\n in ${HOME}:" | log
# Install config directory
mkdir -p ${HOME}/.config | log
mkdir -p ${HOME}/.vim    | log
mkdir -p ${HOME}/bin     | log

cp -r src/config/* ${HOME}/.config | log
cp -r src/vim/* ${HOME}/.vim       | log
echo "" | log

# Install rcfiles
echo "Installing rcfiles:" | log
for f in src/rcfiles/*; do
  file=$(basename $f)
  prependFileWithCheck ${f} ${HOME}/.${file}
done
echo "Installed rcfiles.\n" | log

# Download Scripts
scripts=(
  https://raw.githubusercontent.com/jwiegley/git-scripts/master/git-forest
  https://raw.githubusercontent.com/whiteinge/dotfiles/master/bin/diffconflicts
)

mkdir -pv ${HOME}/bin | log
if commandExists wget; then
  echo "Installing scripts from github:" | log
  for i in ${scripts[*]}; do
    # --no-clobber - Don't download if script already exists
    # --directory-prefix - Download scripts to ~/.bash/scripts
    wget --no-clobber --directory-prefix=${HOME}/bin $i 2>&1 | log
  done

  chmod -v +x ${HOME}/bin/* | log
  echo "Done installing scripts\n" | log

  # Powerline Fonts
  echo "Installing Powerline fonts:" | log
  if [ ! -e ${HOME}/.fonts/ubuntu-mono-power ] && [ ! -e ${HOME}/.config/fontconfig/conf.d ]; then
    mkdir -pv ${HOME}/.fonts/ubuntu-mono-power | log
    mkdir -pv ${HOME}/.config/fontconfig/conf.d/ | log
    wget --no-clobber https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf -O ${HOME}/.fonts/PowerlineSymbols.otf | log
    wget --no-clobber https://github.com/powerline/powerline/raw/develop/font/10-powerline-symbols.conf -O ${HOME}/.config/fontconfig/conf.d/10-powerline-symbols.conf | log
    git clone https://github.com/pdf/ubuntu-mono-powerline-ttf.git ${HOME}/.fonts/ubuntu-mono-power | log
    fc-cache -vf ${HOME}/.config/fonts | grep 'fc-cache:'
    fc-cache -vf ${HOME}/.fonts | grep 'fc-cache:'
  fi
  echo "" | log
fi

for script in src/scripts/*; do
  chmod -v +x $script | log
  cp -v $script ${HOME}/bin | log
done

# Bash completion for mac
if [ "$(uname)" == "Darwin" ]; then
  echo "Bash completion for mac" | log
  if commandExists brew; then
    if ! brew ls --version bash-completion > /dev/null; then
      brew install git bash-completion
    fi
  fi
fi

echo "Configuring git:" | log
# Git configuration
if command -v git; then
  ./src/gitconfig
fi

#  Vi mode in ghci!
echo "Enabling Vi-mode in ghci" | log
if ! grep -q "editMode vi" ${HOME}/.haskeline; then
  echo "editMode: Vi" >> ${HOME}/.haskeline
fi

# Installing Vim plugins
vi +PluginInstall +qall

# Install Vimproc
echo "Installing Vimproc:" | log
if [ -e ${VIM_DIR}/bundle/vimproc.vim ]; then
  ( cd ${VIM_DIR}/bundle/vimproc.vim; make ) | log
fi
echo -e "Done installing Vimproc\n" | log

# Powerline installation
if commandExists pip; then
  echo "Installing powerline" | log
  export PATH="${PATH}:${HOME}/.config/bash/scripts"
  pip install --user --editable=${POWERLINE_DIR} | log

  # Symlink the powerline shell command to the bash scripts directore
  if [ ! -L ${HOME}/bin/powerline ]; then
    ln -fsv ${POWERLINE_DIR}/scripts/* ${HOME}/bin/ | log
  fi
fi

if [ ! -L ${HOME}/bin/thesaurus-lookup.sh ]; then
  ln -fsv ${VIM_DIR}/bundle/vim-online-thesaurus/plugin/thesaurus-lookup.sh ${HOME}/bin/ | log
fi

source ${BASHRC}

exit 0
